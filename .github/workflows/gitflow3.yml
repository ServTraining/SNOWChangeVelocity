# This is a basic workflow to help you get started with Actions

name: gitflow3

on:
  workflow_dispatch:

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: "build"
        run: echo Hello, build!

  test:
    name: test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: "test"
        run: echo "Hello, test!"

  ProdDeploy:
    name: 'ProdDeploy'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: ServiceNow Change
        uses: ServiceNow/servicenow-devops-change@v4.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # Orchestration Tool Id
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # GitHub Context
          context-github: ${{ toJSON(github) }}
          # Display Name of the Job
          job-name: 'ProdDeploy'
          change-request: '{"attributes":{"requested_by":{"name": "Abel Tuter"},"assignment_group":{"name": "Change Management"},"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}'
          timeout: '3600'
          interval: '100'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true
