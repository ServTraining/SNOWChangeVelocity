# This is a basic workflow to help you get started with Actions

name: CD_CDGithubWorkflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
   #push:
     #branches: 
     # - "main"
  # pull_request:
  #   branches: 
  #     - "main"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Build"
  Build:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: "Build"
        run: echo "Build"

  Test:

    runs-on: ubuntu-latest
    steps:
      - name: "Test Step of the workflow/pipeline"
        run: echo "Test Step"

  Prod:
    
    needs: Test  # Ensure that "Test" job runs before this job
    runs-on: ubuntu-latest
    steps:
      - name: ServiceNow DevOps Change Automation
        uses: ServiceNow/servicenow-devops-change@v4.1.0
        id: create
        with:
          # devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          # devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          context-github: ${{ toJSON(github) }}
          job-name: 'ProdDeploy'
          change-request: >
            {
              "setCloseCode": "true",
              "autoCloseChange": true,
              "attributes": {
                "requested_by": {
                  "email": "abel.tuter@example.com"
                },
                "assignment_group": "b85d44954a3623120004689b2d5dd60a",
                "short_description": "Automated Software Deployment",
                "description": "Automated Software Deployment.",
                "implementation_plan": "Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.",
                "backout_plan": "When software fails in production, the previous software release will be re-deployed.",
                "test_plan": "Testing if the software was successfully deployed"
              }
            }
          interval: '100'
          timeout: '3600'
          changeCreationTimeOut: '3600'
          abortOnChangeCreationFailure: true
          abortOnChangeStepTimeout: true
          # deployment-gate: '{"environment":"deploy-gates-demo","jobName":"ProdDeploy"}'

      - name: Output of Change Creation
        run: echo "change-request-number = ${{ steps.create.outputs.change-request-number }}"
